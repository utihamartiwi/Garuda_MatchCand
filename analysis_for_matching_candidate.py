# -*- coding: utf-8 -*-
"""Analysis for matching candidate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hbYBgLtY1xyXNv_NZIvwx2rj_Ym3uQf
"""

import pandas as pd
import numpy as np

HR_need = pd.read_csv('/content/drive/MyDrive/HR data.csv')
HR_need

cand = pd.read_csv('/content/drive/MyDrive/candidate.csv')
cand

#Convert level to number
def lev(what, form_):
  list_level = []
  for i in form_[what]:
    if i == 'Bachelor' or i == 'Low':
      list_level.append(1)
    elif i == 'Master' or i == 'Medium':
      list_level.append(2)
    elif i == 'Doctor' or i == 'High':
      list_level.append(3)
    else:
      list_level.append(0)
  form_['newlevel_'+ what] = list_level

lev('Level of education', HR_need)
lev('Level_skill1', HR_need)
lev('Level_skill2', HR_need)
lev('Level_Skill3', HR_need)
HR_need

lev('Level of education', cand)
lev('Level_1', cand)
lev('Level_2', cand)
lev('Level_3', cand)
cand

a = cand[cand['Position'] == 'data scientist'].copy()
a.index = list(range(len(a)))
a

def match(job, top):
  match = []
  add_score = []
  dc = cand[cand['Position'] == job]
  ind = list(range(len(dc)))
  dc.index = ind
  dh = HR_need[HR_need['Position'] == job]
  skillHR_list = [dh['Skill_1'].values[0], dh['Skill_2'].values[0], dh['Skill_3'].values[0]]
  levelHR_list = [dh['newlevel_Level_skill1'].values[0], dh['newlevel_Level_skill2'].values[0], dh['newlevel_Level_Skill3'].values[0]]
  el = int(dh['newlevel_Level of education'].values[0])
  exh = int(dh['Related_Experience'].values[0])
  ch = dh['City'].values[0]

  for i in range(len(dc)):
    m = 0
    s = 0
    edc = dc['newlevel_Level of education'][i]
    if edc >= el:
      m = m + 1
      s = s + (edc - el)

    if dc['field'][i] == dh['field'].values[0]:
      m = m + 1
    
    #skill
    skillcan_list = [dc['Skill1'][i], dc['Skill2'][i], dc['Skill3'][i]]
    levelcan_list = [dc['newlevel_Level_1'][i], dc['newlevel_Level_2'][i], dc['newlevel_Level_3'][i]]

    for j, skill_ in enumerate(skillHR_list):
      if str(skill_) in skillcan_list:
        m = m + 1
        if levelcan_list[skillcan_list.index(skill_)] >= levelHR_list[j]:
          m = m+1
          s = s + (levelcan_list[skillcan_list.index(skill_)] - levelHR_list[j])
          
    #experience
    exc = int(dc['Related_Experience'][i])
    if exc >= exh:
      m = m + 1
      s = s + (exc - exh)
    
    #city
    if dc['City'][i] == ch:
      m = m+1
    
    match.append(m*10)
    add_score.append(s*10)
  dc['match'] = match
  dc['add_score'] = add_score
  d_sort = dc.sort_values(by=['match', 'add_score'], ascending=False)
  dtop = d_sort.head(top)

  df = pd.DataFrame({'match': dtop['match'].values,
                   'add_score': dtop['add_score'].values}, index=dtop['Name'].values)
  ax = df.plot.bar(stacked=True)

  return d_sort, dtop

df_all, df_top = match('talent acquisition', 5)
df_top

